Rotate Matrix
Difficulty: MEDIUM
Contributed By
Achint Narang
|
Level 1
Avg. time to solve
15 min
Success Rate
85%
Problem Statement
Given a 2-dimensional matrix of size ‘N’ x ‘M’, rotate the elements of the matrix clockwise.
For example: 
Input Matrix: [ [ 1, 2, 3 ] 
                [ 4, 5, 6 ] 
                [ 7, 8, 9 ] ]

Output Matrix: [ [ 4, 1, 2 ] 
                 [ 7, 5, 3 ] 
                 [ 8, 9, 6 ] ]

The output matrix is generated by rotating the elements of the input matrix in a clockwise direction. Note that every element is rotated only once. 
Note :
You do not need to print anything; it has already been taken care of. Also, update the given matrix in-place.
Input Format :
The first line of input contains an integer 'T' representing the number of test cases. Then the test cases follow.

The first line of each test case contains two single-spaced integers N and M, representing the number of rows and columns of the matrix, respectively.

The next N line contains M single-spaced integers denoting the matrix elements. 
Output Format :
For each test case, the modified matrix is printed.

The output for each test case is in a separate line.
Constraints :
1 <= T <= 10
1 <= N, M <= 100
-10^5 <= data <= 10^5,

where ‘T’ is the number of test cases,  ‘N’ and ‘M’ are the numbers of rows and columns respectively and ‘data’ is the value of the elements of the matrix.
Sample Input 1 :
1
4 4
1 2 3 4
5 6 7 8
9 10 11 12
13 14 15 16
Sample Output 1 :
5 1 2 3
9 10 6 4
13 11 7 8
14 15 16 12
Explanation Of Sample Input 1 :

The resulting matrix after rotating the given matrix clockwise is shown above. 
Sample Input 2 :
2
2 2
1 3
4 5
3 3
3 4 5
5 6 7
8 10 20
Sample Output 2 :
4 1
5 3
5 3 4
8 6 5
10 20 7 




===============================================================================================================================================================
//this is not solution this is solution of rotate image clockewise 90.
void rotateMatrix(vector<vector<int>> &mat, int n, int m)
{
for(int i=0;i<n;i++)
{
	for(int j=0;j<m;j++)
	{
		swap(mat[i][j],mat[j][i]);
	}
}
	for(int i=0;i<n;i++)
	{
		reverse(mat[i].begin(),mat[i].end());
	}

}


========================================================================================================================================================================

//this is solution of question

*

    Time Complexity: O(N * M)
    Space Complexity: O(1)

    Where N, M are the number of rowStarts and the number of colStartumns of the matrix, 
    respectively. 

*/


void rotateMatrix(vector<vector<int>> &mat, int n, int m)
{
    // Index of starting row and column
    int rowStart = 0, colStart = 0; 
    
    int previous, current; 

    while (rowStart < n && colStart < m) 
    { 
        // If we have rotated the whole matrix
        if (rowStart == n - 1 || colStart == m - 1)
        { 
            break; 
        }
        // Store the first element of next rown as this element will replace the first element of current row
        previous = mat[rowStart + 1][colStart]; 
        
        // Move elements of first row from the remaining rows
        for (int i = colStart; i < m; i++) 
        { 
            current = mat[rowStart][i]; 
            mat[rowStart][i] = previous; 
            previous = current; 
        } 
        rowStart++; 
  
        // Move elements of last column from the remaining columns 
        for (int i = rowStart; i < n; i++) 
        { 
            current = mat[i][m-1]; 
            mat[i][m-1] = previous; 
            previous = current; 
        } 
        m--; 
  
        // Move elements of last rowStart from the remaining rows 
        if (rowStart < n) 
        { 
            for (int i = m-1; i >= colStart; i--) 
            { 
                current = mat[n-1][i]; 
                mat[n-1][i] = previous; 
                previous = current; 
            } 
        } 
        n--; 
  
        // Move elements of first column from the remaining rows 
        if (colStart < m) 
        { 
            for (int i = n-1; i >= rowStart; i--) 
            { 
                current = mat[i][colStart]; 
                mat[i][colStart] = previous; 
                previous = current; 
            } 
        } 
        colStart++; 
    } 
}

========================================================================================================================================================================

//recursive

/*

	Time Complexity: O(N * M)
	Space Complexity: O(max(N, M)), 

    Where N is the number of rows and M is the number of columns in the matrix.

*/

void rotateMatrixHelper(vector<vector<int>> &mat, int rowStart, int colStart, int rowEnd, int colEnd)
{
    // Base Condition
    if(rowStart >= rowEnd or colStart >= colEnd)
    {
        return; 
    }

    if (rowStart >= rowEnd - 1 || colStart >= colEnd - 1)
    { 
        return; 
    }

    int previous = mat[rowStart + 1][colStart]; 
    int current;
        
    // Move elements of first row from the remaining rows
    for (int i = colStart; i < colEnd; i++) 
    { 
        current = mat[rowStart][i]; 
        mat[rowStart][i] = previous; 
        previous = current; 
    } 

    rowStart++; 

    // Move elements of last column from the remaining columns 
    for (int i = rowStart; i < rowEnd; i++) 
    { 
        current = mat[i][colEnd-1]; 
        mat[i][colEnd-1] = previous; 
        previous = current; 
    } 
    colEnd--; 

    // Move elements of last row from the remaining rows 
    if (rowStart < rowEnd) 
    { 
        for (int i = colEnd - 1; i >= colStart; i--) 
        { 
            current = mat[rowEnd-1][i]; 
            mat[rowEnd-1][i] = previous; 
            previous = current; 
        } 
    } 
    rowEnd--; 

    // Move elements of first column from the remaining rows 
    if (colStart < colEnd) 
    { 
        for (int i = rowEnd-1; i >= rowStart; i--) 
        { 
            current = mat[i][colStart]; 
            mat[i][colStart] = previous; 
            previous = current; 
        } 
    } 
    colStart++; 

    // Recursively rotate inner rings
    rotateMatrixHelper(mat, rowStart, colStart, rowEnd, colEnd);

}

void rotateMatrix(vector<vector<int>> &mat, int n, int m)
{
    // Recursive function to rotate the matrix
	rotateMatrixHelper(mat, 0, 0, n, m);
}
