90. Subsets II
Medium

5441

161

Add to List

Share
Given an integer array nums that may contain duplicates, return all possible subsets (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

 

Example 1:

Input: nums = [1,2,2]
Output: [[],[1],[1,2],[1,2,2],[2],[2,2]]
Example 2:

Input: nums = [0]
Output: [[],[0]]
 

Constraints:

1 <= nums.length <= 10
-10 <= nums[i] <= 10
Accepted
527,019
Submissions
978,958

==============================================================================================================================================

class Solution {
public:
void solve(int i,int n,vector<int> &arr,vector<vector<int> >&ans,vector<int> &curr)
 {
    if(i==n)
    {
        ans.push_back(curr);
        return ;
    }
      curr.push_back(arr[i]);
      solve(i+1,n,arr,ans,curr);
      curr.pop_back();
      while(i+1<n && arr[i]==arr[i+1])
          i++;
      solve(i+1,n,arr,ans,curr);
    
}
    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        int n=nums.size();
        vector<vector<int> >ans;
        sort(nums.begin(),nums.end());
        vector<int> curr;
        solve(0,n,nums,ans,curr);
        sort(ans.begin(),ans.end());
        return ans;
    }
};
